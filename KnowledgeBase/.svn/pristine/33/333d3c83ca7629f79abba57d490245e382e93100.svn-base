using AutoMapper;
using BoeSj.KnowledgeBase.Application.DTO.Input;
using BoeSj.KnowledgeBase.Application.DTO.Output;
using BoeSj.KnowledgeBase.Application.Interface;
using BoeSj.KnowledgeBase.Domain.Model;
using BoeSj.KnowledgeBase.Domain.Model.Mongo;
using BoeSj.KnowledgeBase.Repository.Interface;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace BoeSj.KnowledgeBase.Application.Service
{
    public class QAPublishApp : IQAPublishApp
    {
        private readonly IRepository<QuestionsPublish> _qpRepository;
        private readonly IMapper _mapper;
        private readonly IMongoRepository _mongo;

        public QAPublishApp(IRepository<QuestionsPublish> qpRepository, IMapper mapper, IMongoRepository mongo)
        {
            _qpRepository = qpRepository;
            _mapper = mapper;
            _mongo = mongo;
        }

        public async Task<QAInfoOutput> GetQAInfo(string guid)
        {
            var entity = _qpRepository.Get(o => o.Guid == guid).First();
            var mongoContent = await _mongo.QueryAsync<Post>(o => o.PostGuid == guid && o.Type == 1);
            var qaInfo = _mapper.Map<QAInfoOutput>(entity);
            qaInfo.Content = mongoContent.First().Content;
            return qaInfo;
        }

        /// <summary>
        /// QA问题发布
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        public async Task Publish(QAPublishInput input)
        {
            var entity = _qpRepository.Get(o => o.Guid == input.Guid).First();
            entity.QuestionCategory = input.QuestionCategory;
            entity.BelongDepartment = input.BelongDepartment;
            entity.State = 1;
            entity.PostTime = DateTime.Now;
            await _qpRepository.UpdateAsync(entity);
        }

        /// <summary>
        /// 保存问题
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        public async Task<string> QASave(QAPublishInput input)
        {
            var postGuid = "";
            if (string.IsNullOrEmpty(input.Guid))
            {
                var entity = new QuestionsPublish();
                entity.Title = input.Title;
                entity.CreateTime = DateTime.Now;
                entity.State = 0;
                entity.Guid = input.TempGuid;
                entity.JobNum = "xxx";
                entity.Author = "xxxname";
                postGuid = entity.Guid;
                await _qpRepository.InsertAsync(entity);
                Post post = new Post
                {
                    Title = entity.Title,
                    Content = input.Content,
                    CreateTime = DateTime.Now,
                    PostGuid = postGuid,
                    Type = 1
                };
                var result = _mongo.InsertAsync<Post>(post);
            }
            else//修改
            {
                var entity = _qpRepository.Get(o => o.Guid == input.Guid).First();
                postGuid = entity.Guid;
                entity.Title = input.Title;
                await _qpRepository.UpdateAsync(entity);
                var mongoContent = _mongo.QueryAsync<Post>(o => o.PostGuid == postGuid && o.Type == 1).Result.First();
                mongoContent.Content = input.Content;
                await _mongo.UpdateAsync<Post>(mongoContent);
            }
            _qpRepository.SaveChanges();
            return postGuid;
        }

        /// <summary>
        /// QA问题回复
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        public async Task Reply(QAPublishInput input)
        {
            Reply reply = new Reply
            {
                Content = input.Content,
                CreateTime = DateTime.Now,
                PostGuid = input.Guid,
                JobNum = "10038243",
                Author = "杨帆"
            };
            var result = await _mongo.InsertAsync<Reply>(reply);
        }

        public async Task<List<Reply>> GetReplys(string guid)
        {
            var mongoReplys = await _mongo.QueryAsync<Reply>();
            return mongoReplys.Where(o => o.PostGuid == guid && o.DataFlag == 1).OrderByDescending(o => o.IsBest).ThenBy(o => o.CreateTime).ToList();
        }

        public async Task Like(string guid, int type)
        {
            if (type == 1)
            {
                await _mongo.UpdateIncAsync<Reply>(guid, new { Likes = 1 });
            }
            else
            {
                await _mongo.UpdateIncAsync<Reply>(guid, new { Likes = -1 });
            }
            //throw new NotImplementedException();
        }

        public async Task SetBest(string guid)
        {
            await _mongo.UpdateAsync<Reply>(guid, new { IsBest = 1 });
        }

        public async Task SetState(string guid, int state)
        {
            var entity = _qpRepository.Get(o => o.Guid == guid).First();
            entity.State = state;
            await _qpRepository.UpdateAsync(entity);
        }
    }
}