using AutoMapper;
using BoeSj.KnowledgeBase.Application.Interface;
using BoeSj.KnowledgeBase.Domain.Model;
using BoeSj.KnowledgeBase.Domain.Model.Mongo;
using BoeSj.KnowledgeBase.Domain.Model.Response;
using BoeSj.KnowledgeBase.Repository.Interface;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace BoeSj.KnowledgeBase.Application.Service
{
    public class FieldShareApp : IFieldShareApp
    {
        IRepository<FileShare> _repository;
        IMongoRepository _mongoRepository;
        IMapper _mapper;
        public FieldShareApp(IRepository<FileShare> fsRepository, IMongoRepository mongoRepository, IMapper mapper)
        {
            _repository = fsRepository;
            _mongoRepository = mongoRepository;
            _mapper = mapper;
        }

        public async Task<Response<KnowledegeShareDetail>> GetKnowledgeShareDetail(string id)
        {
            Response<KnowledegeShareDetail> response = new Response<KnowledegeShareDetail>();
            try
            {
                KnowledegeShareDetail knowledegeShareDetail = new KnowledegeShareDetail();
                FileShare exp = _repository.Get(x => x.Guid == id).FirstOrDefault<FileShare>();
                var post = await _mongoRepository.QueryAsync<Post>(x => x.PostGuid == id);
                var postresult = post.FirstOrDefault();
                knowledegeShareDetail.Author = exp.Author;
                knowledegeShareDetail.CreateTime = exp.CreateTime;
                knowledegeShareDetail.Guid = exp.Guid;
                knowledegeShareDetail.JobNum = exp.JobNum;
                knowledegeShareDetail.Likes = exp.Likes;
                knowledegeShareDetail.Status = exp.Status;
                knowledegeShareDetail.PostGuid = postresult.PostGuid;
                knowledegeShareDetail.Category = postresult.Category;
                knowledegeShareDetail.Content = postresult.Content;
                knowledegeShareDetail.Tag = postresult.Tag;
                knowledegeShareDetail.Title = postresult.Title;
                knowledegeShareDetail.Type = postresult.Type;
                response.Data = knowledegeShareDetail;
            }
            catch (Exception ex)
            {
                response.Status = 1;
                response.Msg = ex.Message.ToString();

            }
            return response;
        }
        public  async Task ExcutePost(FileShare TEntity,int id=0)
        {

            if (id == 0)
            {
                await _repository.InsertAsync(TEntity);

            }
            if (id == 1)
            {

                await _repository.UpdateAsync(TEntity);
            }
            _repository.SaveChanges();
        }
    }
}
