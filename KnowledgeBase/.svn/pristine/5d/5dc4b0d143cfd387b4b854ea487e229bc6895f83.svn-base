using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Threading.Tasks;
using Autofac;
using Autofac.Extensions.DependencyInjection;
using AutoMapper;
using BoeSj.KnowledgeBase.Infrastructure.Mongo;
using BoeSj.KnowledgeBase.Repository.Interface;
using BoeSj.KnowledgeBase.Repository.Repository;
using BoeSj.KnowledgeBase.Repository.UnitOfWork;
using BoeSj.KnowledgeBase.Web.Filter;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;

namespace KnowledgeBase
{
    public class Startup
    {

        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public IServiceProvider ConfigureServices(IServiceCollection services)
        {
            services.AddMvc(opt => opt.Filters.Add<KnowledgeExceptionFilter>()).AddJsonOptions(options => options.SerializerSettings.DateFormatString = "yyyy-MM-dd HH:mm:ss");
            services.AddDbContext<KnowledgeContext>(options => options.UseMySQL(Configuration.GetConnectionString("MySqlConnection")));
            services.AddScoped<DbContext>(provider => provider.GetService<KnowledgeContext>());
            services.UserMongoLog(Configuration.GetSection("Mongodb"));
            services.UserConfg<filePath>(Configuration.GetSection("filePath"));
            services.AddAutoMapper();
           
            var containerBuilder = new ContainerBuilder();


            var repositoryassembly = Assembly.Load("BoeSj.KnowledgeBase.Repository");

            var applicationassembly = Assembly.Load("BoeSj.KnowledgeBase.Application");
            var asses = new Assembly[] { repositoryassembly, applicationassembly };

            containerBuilder.RegisterAssemblyTypes(asses)
             .AsImplementedInterfaces().InstancePerLifetimeScope();
            containerBuilder.RegisterGeneric(typeof(Repository<>))
            .As(typeof(IRepository<>))
            .SingleInstance();
            containerBuilder.Populate(services);
            var container = containerBuilder.Build();
            return new AutofacServiceProvider(container);
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseBrowserLink();
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseExceptionHandler("/Home/Error");
            }
            app.UseStaticFiles();
            app.UseMvc(routes =>
            {

                routes.MapRoute(
                    name: "areas",
                    template: "{area:exists}/{controller=Home}/{action=Index}/{id?}"
                  );
                routes.MapRoute(
                    name: "default",
                    template: "{controller=Home}/{action=Index}/{id?}"
                    );

            });
        }
    }
}
